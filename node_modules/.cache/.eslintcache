[{"C:\\Users\\manht\\Documents\\CODE\\2505Clock\\clock\\src\\index.jsx":"1"},{"size":8458,"mtime":1630738477592,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"1yaqrwq","C:\\Users\\manht\\Documents\\CODE\\2505Clock\\clock\\src\\index.jsx",["7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25"],"import React from 'react';\nimport ReactDOM, { render } from 'react-dom';\nimport './styles.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends React.Component {\n  render(){  \n    return(\n        <div className=\"wrapper\">\n          <Clock/>\n        </div>\n      );\n  }\n}\n\n\n\n\nclass Clock extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      isPlay: false,\n      minSessLeft: 25,\n      secSessLeft: 0,\n      minBreakLeft: 5,\n      secBreakLeft: 0,\n      breakLength: 5,\n      sessionLength: 25,\n      intervalId: -1,\n      audioId: 'beep',\n      playingSessionTimer: true\n    };\n  }\n\n  setTime = () => {  \n    const {isPlay, audioId, playingSessionTimer,breakLength, minBreakLeft, secBreakLeft,sessionLength, minSessLeft, secSessLeft}\n    = this.state;   \n    let y = document.getElementById(audioId);\n    if (playingSessionTimer) {\n      this.setState ({\n        minSessLeft: secSessLeft == 0?\n                      minSessLeft - 1:\n                      minSessLeft,\n        secSessLeft: minSessLeft==0&secSessLeft==0?secSessLeft:        \n                      secSessLeft > 0? \n                      secSessLeft - 1:\n                                 59\n      })\n    } else {\n      this.setState ({\n        minBreakLeft: secBreakLeft == 0?\n                      minBreakLeft - 1:\n                      minBreakLeft,\n        secBreakLeft: minBreakLeft==0&secBreakLeft==0?secBreakLeft: \n                      secBreakLeft > 0? \n                      secBreakLeft - 1:\n                                59\n      })\n    };        \n\n    if (playingSessionTimer&&isPlay&&minSessLeft==0&&secSessLeft==0) {\n      this.setState({\n        playingSessionTimer: false,\n        minSessLeft: sessionLength,\n        secSessLeft: 0,\n      });\n      y.currentTime = 1;\n      y.play();\n    } else if (!playingSessionTimer&&isPlay&&minBreakLeft==0&&secBreakLeft==0) {\n      this.setState({\n        playingSessionTimer: true,\n        minBreakLeft: breakLength,\n        secBreakLeft: 0,\n      });\n      y.currentTime = 1;\n      y.play();      \n    }  \n  };\n\n  interval = () => {const intervalID = setInterval(this.setTime, 1000); return intervalID};\n\n  handlePlay = () => {\n    this.setState({\n      isPlay: this.state.isPlay?false:true,\n      intervalId: this.interval(),\n    });\n  }\n  handlePause = () => {    \n    this.setState({\n      isPlay: this.state.isPlay?false:true,\n      intervalId: clearInterval(this.state.intervalId)\n    });\n    let y = document.getElementById('beep');\n    y.pause();\n  }\n\n  handleInitialize = () => {\n    this.setState ({\n      isPlay: false,\n      minSessLeft: 25,\n      secSessLeft: 0,      \n      minBreakLeft: 5,\n      secBreakLeft: 0,\n      breakLength: 5,\n      sessionLength: 25,\n      intervalId: clearInterval(this.state.intervalId),\n      playingSessionTimer: true\n    });    \n    let y = document.getElementById('beep');\n    y.pause();\n    y.currentTime = 0;\n  }\n\n\n  handleBreakDecrement = () => {\n    const {isPlay, minBreakLeft, breakLength} = this.state;\n    if (minBreakLeft > 1 && \n      !isPlay &&\n      breakLength == minBreakLeft) {\n      this.setState({\n        breakLength: breakLength - 1,\n        minBreakLeft: breakLength - 1,\n        secBreakLeft: 0,\n      })\n    } else if (minBreakLeft > 1 && \n      !isPlay &&\n      breakLength != minBreakLeft) {\n      this.setState({\n        breakLength: minBreakLeft - 1,\n        minBreakLeft: minBreakLeft - 1,\n        secBreakLeft: 0,\n      })\n    }\n  }\n\n  handleBreakIncrement = () => {\n    const {isPlay, minBreakLeft, breakLength} = this.state;\n    if (minBreakLeft < 60 && \n      !isPlay &&\n      breakLength == minBreakLeft) {\n      this.setState({\n        breakLength: breakLength + 1,\n        minBreakLeft: breakLength + 1,\n        secBreakLeft: 0,\n      })\n    } else if (minBreakLeft < 60 && \n      !isPlay &&\n      breakLength != minBreakLeft) {\n      this.setState({\n        breakLength: minBreakLeft + 1,\n        minBreakLeft: minBreakLeft + 1,\n        secBreakLeft: 0,\n      })\n    }\n  }\n\n  handleSessionDecrement = () => {\n    const {isPlay, minSessLeft, sessionLength} = this.state;\n    if (minSessLeft > 1 && \n      !isPlay &&\n      sessionLength == minSessLeft) {\n      this.setState({\n        sessionLength: sessionLength - 1,\n        minSessLeft: sessionLength - 1,\n        secSessLeft: 0,\n      })\n    } else if (minSessLeft > 1 && \n      !isPlay &&\n      sessionLength != minSessLeft) {\n      this.setState({\n        sessionLength: minSessLeft - 1,\n        minSessLeft: minSessLeft - 1,\n        secSessLeft: 0,\n      })\n    }\n  }\n\n  handleSessionIncrement = () => {\n    const {isPlay, minSessLeft, sessionLength} = this.state;\n    if (minSessLeft < 60 && \n      !isPlay &&\n      sessionLength == minSessLeft) {\n      this.setState({\n        sessionLength: sessionLength + 1,\n        minSessLeft: sessionLength + 1,\n        secSessLeft: 0,\n      })\n    } else if (minSessLeft < 60 && \n      !isPlay &&\n      sessionLength != minSessLeft) {\n      this.setState({\n        sessionLength: minSessLeft + 1,\n        minSessLeft: minSessLeft + 1,\n        secSessLeft: 0,\n      })\n    }\n  }\n\n  handleReset = () => {\n    this.handleInitialize()\n  }\n\n  checkTime = (i) => {\n    if (i < 10) {\n      i = \"0\" + i;\n    }\n    return i;\n  }\n  \n  render() {\n    return (\n      <div className=\"container\"  style={{textAlign:\"center\"}}>     \n        <div className=\"row\">\n          <div className=\"col col-sm-3\"></div>\n          <div className=\"col col-sm-3\">\n            <div id=\"break-label\">Break length</div>\n            <button id=\"break-decrement\" onClick={this.handleBreakDecrement}>\n              <i className=\"fas fa-arrow-circle-down\" /> \n            </button>\n            <div id=\"break-length\">\n              {\n                this.state.breakLength\n              }\n            </div>\n            <button id=\"break-increment\" onClick={this.handleBreakIncrement}>\n              <i className=\"fas fa-arrow-circle-up\" /> \n            </button>\n          </div>\n          <div className=\"col col-sm-3\">    \n            <div id=\"session-label\">Session length</div>        \n            <button id=\"session-decrement\" onClick={this.handleSessionDecrement}>\n              <i className=\"fas fa-arrow-circle-down\" />\n            </button>\n            <div id=\"session-length\">\n              {\n                this.state.sessionLength\n              }\n            </div>\n            <button id=\"session-increment\" onClick={this.handleSessionIncrement}>\n              <i className=\"fas fa-arrow-circle-up\" /> \n            </button>\n          </div>\n          <div className=\"col col-sm-3\"></div>\n        </div> \n        <div className=\"row\">\n          <div className=\"col col-sm-4\"></div>\n          <div className=\"col col-sm-4 session-border\">\n            <div id=\"timer-label\"><p style={{fontSize:\"40pt\"}}>\n              {\n                this.state.playingSessionTimer?\n                  'Session'\n                :\n                  'Break'\n              }\n              </p>\n              </div>\n            <div id=\"time-left\">\n              {\n                this.state.playingSessionTimer?\n                  this.checkTime(this.state.minSessLeft) + ':' + this.checkTime(this.state.secSessLeft)\n                :\n                this.checkTime(this.state.minBreakLeft) + ':' + this.checkTime(this.state.secBreakLeft)\n              }\n            </div>\n          </div>\n          <div className=\"col col-sm-4\"></div>\n        </div>  \n        <div className=\"row\">\n            <div className=\"col col-sm-12\">\n              {\n                !this.state.isPlay?\n                  <button id=\"start_stop\" onClick={this.handlePlay}>\n                    <i className=\"fas fa-solid fa-play\"></i>\n                  </button>\n                :\n                  <button id=\"start_stop\" onClick={this.handlePause}>\n                    <i className=\"fas fa-solid fa-pause\"></i>\n                  </button>\n              }\n              <button id=\"reset\" onClick={this.handleReset}>\n                <i className=\"fas fa-solid fa-stop\"></i>\n              </button> \n            </div>\n        </div>             \n        <audio\n          id=\"beep\"          \n          src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"\n        />\n      </div>\n    );\n  }\n}\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n",{"ruleId":"26","severity":1,"message":"27","line":2,"column":20,"nodeType":"28","messageId":"29","endLine":2,"endColumn":26},{"ruleId":"30","severity":1,"message":"31","line":43,"column":34,"nodeType":"32","messageId":"33","endLine":43,"endColumn":36},{"ruleId":"30","severity":1,"message":"31","line":46,"column":33,"nodeType":"32","messageId":"33","endLine":46,"endColumn":35},{"ruleId":"30","severity":1,"message":"31","line":46,"column":48,"nodeType":"32","messageId":"33","endLine":46,"endColumn":50},{"ruleId":"30","severity":1,"message":"31","line":53,"column":36,"nodeType":"32","messageId":"33","endLine":53,"endColumn":38},{"ruleId":"30","severity":1,"message":"31","line":56,"column":35,"nodeType":"32","messageId":"33","endLine":56,"endColumn":37},{"ruleId":"30","severity":1,"message":"31","line":56,"column":51,"nodeType":"32","messageId":"33","endLine":56,"endColumn":53},{"ruleId":"30","severity":1,"message":"31","line":63,"column":49,"nodeType":"32","messageId":"33","endLine":63,"endColumn":51},{"ruleId":"30","severity":1,"message":"31","line":63,"column":65,"nodeType":"32","messageId":"33","endLine":63,"endColumn":67},{"ruleId":"30","severity":1,"message":"31","line":71,"column":58,"nodeType":"32","messageId":"33","endLine":71,"endColumn":60},{"ruleId":"30","severity":1,"message":"31","line":71,"column":75,"nodeType":"32","messageId":"33","endLine":71,"endColumn":77},{"ruleId":"30","severity":1,"message":"31","line":121,"column":19,"nodeType":"32","messageId":"33","endLine":121,"endColumn":21},{"ruleId":"30","severity":1,"message":"34","line":129,"column":19,"nodeType":"32","messageId":"33","endLine":129,"endColumn":21},{"ruleId":"30","severity":1,"message":"31","line":142,"column":19,"nodeType":"32","messageId":"33","endLine":142,"endColumn":21},{"ruleId":"30","severity":1,"message":"34","line":150,"column":19,"nodeType":"32","messageId":"33","endLine":150,"endColumn":21},{"ruleId":"30","severity":1,"message":"31","line":163,"column":21,"nodeType":"32","messageId":"33","endLine":163,"endColumn":23},{"ruleId":"30","severity":1,"message":"34","line":171,"column":21,"nodeType":"32","messageId":"33","endLine":171,"endColumn":23},{"ruleId":"30","severity":1,"message":"31","line":184,"column":21,"nodeType":"32","messageId":"33","endLine":184,"endColumn":23},{"ruleId":"30","severity":1,"message":"34","line":192,"column":21,"nodeType":"32","messageId":"33","endLine":192,"endColumn":23},"no-unused-vars","'render' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='."]